<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Design is Choice</title>
    <description></description>
    <link>http://designischoice.com/</link>
    <atom:link href="http://designischoice.com/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Thu, 27 Sep 2018 22:47:29 -0500</pubDate>
    <lastBuildDate>Thu, 27 Sep 2018 22:47:29 -0500</lastBuildDate>
    <generator>Jekyll v2.4.0</generator>
    
      <item>
        <title>Roger Antonsen Could Be Describing Generative Art</title>
        <description>&lt;p&gt;&lt;img src=&quot;/images//2016/12/10/ted-talk.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I found &lt;a href=&quot;https://www.ted.com/talks/roger_antonsen_math_is_the_hidden_secret_to_understanding_the_world/&quot;&gt;this TED talk&lt;/a&gt; today, where &lt;a href=&quot;http://rantonse.no/en&quot;&gt;Roger Antonsen&lt;/a&gt; says that, to understand something, you have to look at it from different perspectives. That sounds psychological or sociological, or even (especially lately) political, but it’s actually a math talk. To me, it described the process of making generative art, but from a very different perspective.&lt;/p&gt;

&lt;h2 id=&quot;patterns-and-language-to-describe-them&quot;&gt;Patterns, and Language to Describe Them&lt;/h2&gt;

&lt;p&gt;His “day-to-day definition of math” reminds me of the process I go through when working on a new gen-art piece, or exploring a programming abstraction. He says math is about:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Finding patterns: “a connection, a structure, some regularity, some rules that govern what we see.”&lt;/li&gt;
  &lt;li&gt;Representing those patterns with a language. “We make up language if we don’t have it, and in mathematics, this is essential.”&lt;/li&gt;
  &lt;li&gt;Making assumptions, and playing around with them to see what happens.&lt;/li&gt;
  &lt;li&gt;“Doing cool stuff. Mathematics enables us to do so many things.”&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When I make a Processing sketch, I’m usually looking for interesting patterns or regularities that can be generated by algorithm. The algorithm becomes a langauge to describe and represent the patterns - not just one image, but the set of all images the algorithm can generate. Since I’m often making up the algorithm as I go, I’m making up that language. As I build and refine the algorithm, “playing around with these assumptions and just seeing what happens” is a how I look for more-interesting variants to the main idea.&lt;/p&gt;

&lt;h2 id=&quot;equations-as-metaphor&quot;&gt;Equations as Metaphor&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/images//2016/12/10/equation-2x.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;An equation says that something is equal to something else. On the one hand,
it’s a sum; on the other hand, it’s a multiplication, and those are two
different perspectives.  And I would go as far as to say that every equation
is like this, every mathematical equation where you use that equality sign is
actually a metaphor. It’s an analogy between two things. You’re just viewing
something and taking two different points of view, and you’re expressing that
in a language.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;He goes on to look at the number 4/3 from several perspectives: in decimal (1.33333…), in binary (1.010101010…), in base 3 (1.1), as a 4x3 rectangle, as the sides of a 3-4-5 right triangle, as the aspect ratio of old computer screens and TVs, as generating a &lt;a href=&quot;https://en.wikipedia.org/wiki/Lissajous_curve&quot;&gt;Lissajous curve&lt;/a&gt;, as the &lt;a href=&quot;https://en.wikipedia.org/wiki/Just_intonation&quot;&gt;just interval&lt;/a&gt; of &lt;a href=&quot;https://en.wikipedia.org/wiki/Perfect_fourth&quot;&gt;a perfect fourth&lt;/a&gt;, and as producing a counter-point rhythm when every fourth 16th note is played, and every third 16th note is played on top of it.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images//2016/12/10/four-thirds-rhythm.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This translation of an idea into a different form is also a good way to explore generative art. Often, I’ll explore an idea, and reach a plateau where it turns boring, and it only really gets interesting once I’ve put it into some different context.&lt;/p&gt;

&lt;p&gt;Small surprise that &lt;a href=&quot;https://twitter.com/rantonse/status/805213796654575616&quot;&gt;his twitter feed is recently featuring work made with Processing&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Sat, 10 Dec 2016 00:00:00 -0600</pubDate>
        <link>http://designischoice.com/2016/12/10/roger-antonsen-on-gen-art.html</link>
        <guid isPermaLink="true">http://designischoice.com/2016/12/10/roger-antonsen-on-gen-art.html</guid>
        
        
      </item>
    
      <item>
        <title>I&#39;ll be at Pecha Kucha New Haven</title>
        <description>&lt;p&gt;&lt;img src=&quot;/images//2016/05/10/pechakucha27.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Pecha Kucha is coming to New Haven (well, Hamden, really) on Wednesday, May 18, 7 PM.&lt;/p&gt;

&lt;p&gt;I’ll be there to tell the story of the &lt;a href=&quot;/projects/pool-noodle-animals/&quot;&gt;pool noodle animals project&lt;/a&gt;. I’ll do my best to make it a good story, but even if I totally fail, the other presenters will make up for it. And it’s at &lt;a href=&quot;http://www.theouterspace.net/&quot;&gt;The Outer Space&lt;/a&gt;, so you can enjoy a drink.&lt;/p&gt;
</description>
        <pubDate>Tue, 10 May 2016 00:00:00 -0500</pubDate>
        <link>http://designischoice.com/2016/05/10/pecha-kucha-pool-noodle-animals.html</link>
        <guid isPermaLink="true">http://designischoice.com/2016/05/10/pecha-kucha-pool-noodle-animals.html</guid>
        
        
      </item>
    
      <item>
        <title>A Home for Generative Art Projects</title>
        <description>&lt;p&gt;For over a decade (yeesh), I’ve intermittently blogged at &lt;a href=&quot;http://invisibleblocks.com&quot;&gt;invisibleblocks&lt;/a&gt; about software, agile methods, amateur math, and programming languages, but in the past few years, generative art posts have appeared in the mix. This new tangent threatens to unravel that blog’s argument, and ruin my reputation as a sober software engineer.&lt;/p&gt;

&lt;p&gt;So I’m moving it here.&lt;/p&gt;

&lt;p&gt;Besides, the unit of generative art is the project, and a project needs a home. Projects move more slowly than thoughts. You can spit out a thought, and no one notices if you got it wrong, because they still have five more things to read before the &lt;em&gt;next&lt;/em&gt; wave of stuff, and your thought is forgotten. Projects move more slowly. A steady URL can be a good home.&lt;/p&gt;

&lt;h2 id=&quot;design-is-choice-about-the-name&quot;&gt;Design is Choice: About the Name&lt;/h2&gt;

&lt;p&gt;If you read books or essays about product design, you’ll find the idea that design is about choosing one solution from all possible solutions, a range of solutions, or a “solution space.” Each solution comes with its own trade-offs: things it does well, and things it does poorly. A well-designed product has a good match between what it’s supposed to do, and what it does well.&lt;/p&gt;

&lt;p&gt;This also applies to software design: the way the internals are organized and shaped. To choose a good abstraction, you have to know what the software needs to do, know several ways of doing that, and examine the trade-offs.&lt;/p&gt;

&lt;p&gt;Back to generative art. Let’s look at probably the least-interesting bit of generative art ever made: a white dot, randomly positioned on a black field.&lt;/p&gt;

&lt;div id=&quot;sketchHolder&quot; class=&quot;box-shadow&quot;&gt;&lt;/div&gt;
&lt;script id=&quot;sketchSource&quot;&gt;
function setup() {
  createCanvas(200, 200);
  $(&#39;#sketchHolder&#39;).append($(&#39;#defaultCanvas0&#39;));
}
function draw() {
  background(0);
  var x = random(width);
  var y = random(height);
  fill(255);
  ellipse(x, y, 15, 15);
  noLoop();
}
function mouseClicked() {
  loop();
}
&lt;/script&gt;

&lt;p&gt;Click to make another one. Go on, knock yourself out.&lt;/p&gt;

&lt;p&gt;The program that makes these beauties chooses where the dot should go. It chooses randomly, but it could choose in lots of ways: it could place it according to the time of day, the stock price of some company, the temperature in Buenos Aires. But it &lt;em&gt;chooses.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The dot will be centered on one of 200 horizontal pixels, and one of 200 vertical pixels, meaning that each image is one in 200×200, or one in 40000. Which of these 40,000 images is interesting?&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images//2016/04/23/five-white.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Let’s randomize the color of the dot.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images//2016/04/23/five-colors.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now, for every possible placement of the dot, there are 255×255×255 possible images.&lt;sup id=&quot;fnref:rgb&quot;&gt;&lt;a href=&quot;#fn:rgb&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; That brings the total number of images to 200×200×255×255×255 = 663.255 billion. Not bad!&lt;/p&gt;

&lt;p&gt;What if we also randomly change the background color?&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images//2016/04/23/five-bg-colors.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Multiply in another 255×255×255, for 10,997,679,875,625,000,000, which is almost eleven quintillion. Which of &lt;em&gt;those&lt;/em&gt; is interesting?&lt;/p&gt;

&lt;p&gt;On second thought, let’s not vary the background color. The black background is nice, and we probably won’t see enough of the eleven quintillion to find the good ones.&lt;/p&gt;

&lt;p&gt;The algorithm chooses the specifics - where the dot should go, which color it should be. We choose which outcomes we like. But we also choose the range of possibilities, because we &lt;em&gt;write&lt;/em&gt; the algorithm. If a particular elaboration introduces more bad outcomes than good, we can take it out, and shrink the solution space.&lt;/p&gt;

&lt;p&gt;The generative artist chooses the algorithm, the algorithm chooses the particulars, and the artist chooses the outputs. If the algorithm is interactive, and the artist can steer it somehow, the algorithm and the artist can choose together.&lt;/p&gt;

&lt;p&gt;Generative art, algorithmic art, sounds inhuman, sounds automatic. But an algorithm can engender an unimaginable number of outcomes. The line between noise and art is in how we choose.&lt;/p&gt;
&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:rgb&quot;&gt;
      &lt;p&gt;Computers make different colors by blending various amounts of red, green, and blue light, and generally allow for 255 levels of redness, 255 levels of green-ness, and 255 levels of blue-ness. &lt;a href=&quot;#fnref:rgb&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
        <pubDate>Sat, 23 Apr 2016 00:00:00 -0500</pubDate>
        <link>http://designischoice.com/2016/04/23/a-home-for-generative-art-projects.html</link>
        <guid isPermaLink="true">http://designischoice.com/2016/04/23/a-home-for-generative-art-projects.html</guid>
        
        
      </item>
    
      <item>
        <title>Fractal Circles</title>
        <description>&lt;p&gt;&lt;a href=&quot;http://invisibleblocks.com/2015/12/12/fractal-circles/&quot;&gt;&lt;em&gt;Originally posted on invisibleblocks.com&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In August of 2014, I participated in &lt;a href=&quot;http://grovenewhaven.com/art-of-code-regenerate/&quot;&gt;Re:GENERATE&lt;/a&gt;, a show featuring computer-generated art. I made, among other things, a generative series for the event, that I named Fractal Circles.&lt;/p&gt;

&lt;div class=&quot;gallery&quot;&gt;
  &lt;img src=&quot;02.png&quot; /&gt;
  &lt;img src=&quot;03.png&quot; /&gt;
  &lt;img src=&quot;04.png&quot; /&gt;
  &lt;img src=&quot;05.png&quot; /&gt;
  &lt;img src=&quot;06.png&quot; /&gt;
  &lt;img src=&quot;07.png&quot; /&gt;
  &lt;img src=&quot;08.png&quot; /&gt;
  &lt;img src=&quot;09.png&quot; /&gt;
  &lt;img src=&quot;10.png&quot; /&gt;
  &lt;img src=&quot;11.png&quot; /&gt;
  &lt;img src=&quot;12.png&quot; /&gt;
  &lt;img src=&quot;13.png&quot; /&gt;
  &lt;img src=&quot;14.png&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;It’s a simple recursive algorithm over a region of the sketch:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Should we recurse?
    &lt;ul&gt;
      &lt;li&gt;Yes, recurse:
        &lt;ul&gt;
          &lt;li&gt;Is the region we’re looking at wider than tall? (The first time, this is the whole sketch.)
            &lt;ul&gt;
              &lt;li&gt;Yes: split it into halves, vertically, and recurse into it.&lt;/li&gt;
              &lt;li&gt;No: split it into halves, horizontally, and recurse into it.&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;No, stop recursing:
        &lt;ul&gt;
          &lt;li&gt;Should we draw a circle in this region?
            &lt;ul&gt;
              &lt;li&gt;Yes: pick a circle type (solid or hollow) and draw it.&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This generates a surprisingly wide variety of shapes, some very natural-looking.&lt;/p&gt;

&lt;p&gt;There are three open-ended questions:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Should we recurse?&lt;/li&gt;
  &lt;li&gt;Should we draw a circle?&lt;/li&gt;
  &lt;li&gt;What kind of circle?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you decide to recurse every other time, and always draw a circle, and alternate the circles types, you get this image, which I made to help explain:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;explanation.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If you let yourself pick the &lt;em&gt;type&lt;/em&gt; of circle randomly, you’re left with two questions: whether to recurse, and whether to draw a circle. Answering those questions randomly, and controlling their probability, can generate whole families of images.&lt;/p&gt;

&lt;p&gt;Here are 144 tiny fractal circle images. The probability of recursing decreases as we move from left to right, and the probability of drawing a circle increases as we move from top to bottom.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;orthogonalities.png&quot; class=&quot;box-shadow&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here’s a &lt;a href=&quot;http://p5js.org/&quot;&gt;p5.js&lt;/a&gt; version of it, where the probabilty-to-recurse increases as the hour passes, and the probability-to-draw increases as the minute passes:&lt;/p&gt;

&lt;div id=&quot;sketchHolder&quot; class=&quot;box-shadow&quot;&gt;&lt;/div&gt;

&lt;script id=&quot;sketchSource&quot;&gt;
function Circle(sizePercent) {
  this.strokeWeightPercentOfSize = sizePercent;

  this.draw = function(top, left, size) {
    var halfSize = size * 0.5;
    var centerX = top + halfSize;
    var centerY = left + halfSize;
    var outerSize = size * 0.95;
    var innerSize = size * (1-this.strokeWeightPercentOfSize);
    
    ellipseMode(CENTER);
    fill(0);
    ellipse(centerX, centerY, outerSize, outerSize);
    fill(255);
    ellipse(centerX, centerY, innerSize, innerSize);
  }
}

function setup() {
  createCanvas(680, 720);
  $(&#39;#sketchHolder&#39;).append($(&#39;#defaultCanvas0&#39;));

  noStroke();
  frameRate(2);
};

function draw() {
  pStopRecursing = norm(minute(), 59, 0); //0.35;
  pDrawACircle = norm(second(), 0, 59); // 0.15;

  background(255);
  recurse(20, 20, 680-40, 680-40);

  fill(0);
  textAlign(CENTER);
  text(&quot;Current time: &quot; + nf(hour(), 2) + &quot;:&quot; + nf(minute(), 2) + &quot;:&quot; + nf(second(), 2), width/2, height-60);
  text(&quot;Chance of drawing: &quot; + second() + &quot;/60 = &quot; + nf(pDrawACircle, 1, 3), width/2, height-40);
  text(&quot;Chance of recursing: &quot; + minute() + &quot;/60 = &quot; + nf((1-pStopRecursing), 1, 3), width/2, height-20);
};

var pickACircle = (function() {
  var thin = new Circle(0.15);
  var thick = new Circle(1 - (0.85 * 0.5));
  var solid = new Circle(1);
  var choices = [thick, solid];

  return function() {
    return choices[floor(random(choices.length))];
  }
})();

var pStopRecursing = 0.35;
var pDrawACircle = 0.15;

function recurse(left, top, right, bottom) {
  var minSize = 12;
  var wide = right - left;
  var high = bottom - top;
  
  if (random(1) &lt; pStopRecursing || wide &lt; minSize || high &lt; minSize) {
    if (random(1) &lt; pDrawACircle) {
      pickACircle().draw(left, top, wide);
    }
  } 
  else {
    if (wide &gt;= high) {
      var middle = (right + left) * 0.5;
      recurse(left, top, middle, bottom);
      recurse(middle, top, right, bottom);
    } else {
      var middle = (top + bottom) * 0.5;
      recurse(left, top, right, middle);
      recurse(left, middle, right, bottom);
    }
  }
}
&lt;/script&gt;

</description>
        <pubDate>Sat, 12 Dec 2015 00:00:00 -0600</pubDate>
        <link>http://designischoice.com/projects/fractal-circles</link>
        <guid isPermaLink="true">http://designischoice.com/projects/fractal-circles</guid>
        
        
        <category>project</category>
        
      </item>
    
      <item>
        <title>Pool Noodle Animals</title>
        <description>&lt;p&gt;&lt;img src=&quot;banner.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In October 2015, my friend &lt;a href=&quot;http://rectangleworld.com&quot;&gt;Dan Gries&lt;/a&gt; and I got to decorate the windows of the New Haven Armory on Goffe Street, for &lt;a href=&quot;http://www.cwos.org&quot;&gt;City Wide Open Studios&lt;/a&gt;. They were covered in metal grids, and, like we had with the Marilyn Monroe piece we did for Re:Generate 2014, we stuffed the grid with chunks of pool noodles.&lt;/p&gt;

&lt;h2 id=&quot;planning&quot;&gt;Planning&lt;/h2&gt;

&lt;p&gt;Since the grid was diagonal, and stretched, we had to find a new way to cut the noodles to fit into the grid. After a few bad ideas…&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;bad-stick-method.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;…we settled on alternating diagonal placement.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;close-up.jpg&quot; alt=&quot;A close-up photo of the pool noodles&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We had sixteen grids that were about 30” wide, 72” tall. That meant buying a lot of pool noodles.&lt;/p&gt;

&lt;h2 id=&quot;stocking-up&quot;&gt;Stocking Up&lt;/h2&gt;

&lt;p&gt;A &lt;em&gt;lot&lt;/em&gt; of pool noodles. We went to Dollar Stores in something like seven cities to find enough - since it was September, a lot of the stores were out, but we eventually found enough.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;dollar-store.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We bought over 250 pool noodles, and ultimately placed 25,352 pieces into the grid. To turn each pool noodle into about 100 pieces would be a lot of cutting.&lt;/p&gt;

&lt;h2 id=&quot;cutting&quot;&gt;Cutting&lt;/h2&gt;

&lt;p&gt;My buddies &lt;a href=&quot;https://twitter.com/sergeography&quot;&gt;Scott&lt;/a&gt; and Anna suggested I borrow their bandsaw.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;band-saw.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This beauty was my savior. While Dan did a lot of the image and software work, I focused on cutting up the noodles.&lt;/p&gt;

&lt;p&gt;First, cut them in half lengthwise:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;cut1.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Then each half into quarters:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;cut2.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Then each quarter into chunks:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;cut3.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;prepping-images&quot;&gt;Prepping Images&lt;/h2&gt;

&lt;p&gt;At the same time, we were looking for images to use. CWOS’ theme for 2015 was “Dwelling,” so we eventually settled on animals that you often find around the home. It was clear that the images had to be recognizable - we thought a lot about doing abstracts, but it always seemed too boring for this medium. Once we had a range of images, Dan ran them through a dithering algorithm, and made preview PDFs. We had to keep track of how many orange, blue, and green were used in each image, so we didn’t run out of any color. To pick the final set, we printed them all, and laid them out.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;planning-prints.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;With about 1,300 pieces per grid, you need a map.&lt;/p&gt;

&lt;div class=&quot;gallery&quot;&gt;
  &lt;img src=&quot;printout-photo.jpg&quot; /&gt;
  &lt;img src=&quot;printout-photos.jpg&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;printout.png&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;installation&quot;&gt;Installation&lt;/h2&gt;

&lt;p&gt;We needed three car-loads to drive the ladders, table, and bags of noodle chunks to the Armory.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;ready-to-start.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;ready-to-install.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;mary-installing.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;printout-progress.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;chickie-progress.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Some of the volunteers improvised with the noodle chunks, and used them to hold the map in place.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;map-in-the-grid.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Look at Dan G, noodling like a boss: bag of noodles in one hand, marker in the other.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;dan-like-a-pro.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;the-results&quot;&gt;The Results&lt;/h2&gt;

&lt;p&gt;Here they are, from left to right, which is about the reverse of the order they were completed in:&lt;/p&gt;

&lt;div class=&quot;gallery&quot;&gt;
  &lt;img src=&quot;01.1200.jpg&quot; /&gt;
  &lt;img src=&quot;02.1200.jpg&quot; /&gt;
  &lt;img src=&quot;03.1200.jpg&quot; /&gt;
  &lt;img src=&quot;04.1200.jpg&quot; /&gt;
  &lt;img src=&quot;05.1200.jpg&quot; /&gt;
  &lt;img src=&quot;06.1200.jpg&quot; /&gt;
  &lt;img src=&quot;07.1200.jpg&quot; /&gt;
  &lt;img src=&quot;08.1200.jpg&quot; /&gt;
  &lt;img src=&quot;09.1200.jpg&quot; /&gt;
  &lt;img src=&quot;10.1200.jpg&quot; /&gt;
  &lt;img src=&quot;11.1200.jpg&quot; /&gt;
  &lt;img src=&quot;12.1200.jpg&quot; /&gt;
&lt;/div&gt;

&lt;h2 id=&quot;after-the-show&quot;&gt;After the Show&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://www.flickr.com/photos/dangries/albums/72157659810977045&quot;&gt;Dan’s flickr album&lt;/a&gt; has a bunch of great photos of the preparation, installation, and results.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;panorama.jpg&quot; alt=&quot;&quot; class=&quot;open&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You can (as of this post, anyway) see it up on &lt;a href=&quot;https://www.google.com/maps/@41.3189283,-72.9391609,3a,75y,221.88h,89.7t/data=!3m6!1e1!3m4!1sGNkStzNktfHzy6_1vrxfpA!2e0!7i13312!8i6656!6m1!1e1?hl=en&quot;&gt;Google Street view&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Sat, 10 Oct 2015 00:00:00 -0500</pubDate>
        <link>http://designischoice.com/projects/pool-noodle-animals/</link>
        <guid isPermaLink="true">http://designischoice.com/projects/pool-noodle-animals/</guid>
        
        
        <category>project</category>
        
      </item>
    
      <item>
        <title>WordCram Book Covers</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://plus.google.com/u/0/108331224359319726955/posts/dspcMRSmbaQ&quot;&gt;&lt;em&gt;Originally posted in Google Plus&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After talking about John Brunner with my friend &lt;a href=&quot;https://plus.google.com/108723091794785516898&quot;&gt;Shawn Crahan&lt;/a&gt;, I saw that “Stand on Zanzibar” was &lt;a href=&quot;http://www.amazon.com/Stand-Zanzibar-John-Brunner/dp/0765326787&quot;&gt;reprinted in August 2011&lt;/a&gt;, with a very &lt;a href=&quot;http://wordcram.org&quot;&gt;WordCram&lt;/a&gt;-y cover:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;imgs/zanzibar.png&quot; alt=&quot;Stand on Zanzibar&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Book covers was always one of the things people talked about using WordCram for, so I thought I’d try making a fake Borges cover. I think they came out well enough to prove out the idea. I’m not sold on the gradient - I like how the solid orange one came out. But I like the idea of having random words (straight out of the Library of Babel) on the cover.&lt;/p&gt;

&lt;p&gt;The font I used was Bebas Neue, which, it seems, you can never go wrong with.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;imgs/orange.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;imgs/orange-dark.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;imgs/orange-gradient.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;imgs/green.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;imgs/green-dark.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;imgs/green-gradient.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;imgs/yellow.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

</description>
        <pubDate>Sun, 01 Dec 2013 00:00:00 -0600</pubDate>
        <link>http://designischoice.com/projects/wordcram-book-covers</link>
        <guid isPermaLink="true">http://designischoice.com/projects/wordcram-book-covers</guid>
        
        
        <category>project</category>
        
      </item>
    
  </channel>
</rss>
